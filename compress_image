#!/bin/sh
# shellcheck disable=SC2154
#
#  Part of https://github.com/emkey1/AOK-Filesystem-Tools
#
#  License: MIT
#
#  Copyright (c) 2023: Jacob.Lundqvist@gmail.com
#
#  Compresses a FS into a tar file that can be mounted by iSH
#
version="1.3.7"

prog_name=$(basename "$0")

#
#  Point to AOK-Filesystem-Tools dir, in case this was run with a path
#
#  shellcheck disable=SC1091
. /opt/AOK/BUILD_ENV

use_bzip2=false
verbose=false

show_help() {
    cat <<EOF
$prog_name, version $version

Usage: $prog_name [-h] [-v] [-z]

This creates a compressed tar file. that iSH can mount as a file syste,

Available options:

-h  --help         Print this help and exit.
-V  --version      Show version and exit.
-j  --bzip2        Use bzip2 compression
-l  --label        Provide a name for tarball (without extension)
-v  --verbose      Display progrss as FS is being compressed.
EOF
    exit 0
}

show_version() {
    echo "$prog_name $version"
    exit 0
}

while [ -n "$1" ]; do

    case "$1" in

    "-h" | "--help") show_help ;;

    "-V" | "--version") show_version ;;

    "-j" | "--bzip2") use_bzip2=true ;;

    "-l" | "--label")
        shift
        tar_name="$1"
        if [ -z "$tar_name" ]; then
            echo "ERROR: label needs name as additional param!"
            exit 1
        fi
        ;;

    "-v" | "--verbose") verbose=true ;;

    *)
        error_msg "bad param, try -h"
        ;;
    esac
    shift
done

if [ "$(whoami)" != "root" ]; then
    # Must come after help display, to avoid infinite loop
    "$0" -h

    error_msg "This must be run as root or using sudo!"
fi

if [ ! -d "$BUILD_ROOT_D" ]; then
    error_msg "No image built yet, [$BUILD_ROOT_D]!"
fi

if [ "$(find "$BUILD_ROOT_D"/dev | wc -l)" -gt 1 ]; then
    error_msg "Active chroot session detected!"
fi

#
#  Since the general default action is to create
#  Alpine images, use the ALPINE_IMG_FNAME name if non is provided
#
if [ -z "$tar_name" ]; then
    tarball="$ALPINE_IMG_FNAME"
else
    tarball="${tar_name}"
fi

# set location
tarball="$BUILD_BASE_D/$tarball"

# echo "removing temp /dev items"
# rm  -f "$BUILD_ROOT_D"/dev/*

msg_1 "Creating image"

#
# Tar up and zip the result
#
cd "$BUILD_ROOT_D" || exit 99

if $use_bzip2; then
    opts="cfj"
    tarball="${tarball}.tar.bz2"
else
    opts="cfz"
    tarball="${tarball}.tgz"
fi

if $verbose; then
    opts="v$opts"
fi

tar "$opts" "$tarball" .

#
# copy it to /iCloud if this runs on iSH
#
if is_ish; then
    msg_2 "Copying image into $ICLOUD_ARCHIVE_D"
    mkdir -p "$ICLOUD_ARCHIVE_D"
    cp "$tarball" "$ICLOUD_ARCHIVE_D"
fi

msg_1 "Image is ready: $tarball"

exit 0 #  Avoid exiting with error if above file did not exist
