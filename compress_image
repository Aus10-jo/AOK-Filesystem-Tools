#!/bin/sh
#
#  Part of https://github.com/emkey1/AOK-Filesystem-Tools
#
#  License: MIT
#
#  Copyright (c) 2023: Jacob.Lundqvist@gmail.com
#
#  Compresses a FS into a tar file that can be mounted by iSH
#

show_help() {
    echo "Usage: $prog_name [-h] [-v] [-z]

This creates a compressed tar file. that iSH can mount as a file system
It autodetects FS type, and will use a matching filename for the tarball.

Available options:

-h  --help         Print this help and exit.
-l  --label        Provide a name for tarball (without path or extension)
-j  --bzip2        Use bzip2 compression
-v  --verbose      Display progrss as FS is being compressed."
    exit 0
}

#===============================================================
#
#   Main
#
#===============================================================

#  Allowing this to be run from anywhere using path
current_dir=$(cd -- "$(dirname -- "$0")" && pwd)

#
#  Automatic sudo if run by a user account, do this before
#  sourcing tools/utils.sh !!
#
. "$current_dir"/tools/run_as_root.sh

. "$current_dir"/tools/utils.sh

prog_name=$(basename "$0")
use_bzip2=false
verbose=false

while [ -n "$1" ]; do

    case "$1" in

    "-h" | "--help") show_help ;;

    "-j" | "--bzip2") use_bzip2=true ;;

    "-l" | "--label")
        shift
        tar_name="$1"
        if [ -z "$tar_name" ]; then
            echo "ERROR: label needs name as additional param!"
            exit 1
        fi
        ;;

    "-v" | "--verbose") verbose=true ;;

    *)
        error_msg "bad param, try -h"
        ;;
    esac
    shift
done

if [ ! -d "$build_root_d" ]; then
    error_msg "No image built yet, [$build_root_d]!"
fi

if [ "$(find "$build_root_d"/dev | wc -l)" -gt 1 ]; then
    error_msg "Active chroot session detected!"
fi

if [ -n "$tar_name" ]; then
    tarball_fn="${tar_name}"
else
    #
    #  If no tarball name was given, try to identify what is prepared
    #  and give it a name  based on this with versions added.
    case "$(destfs_detect)" in
    "$distro_alpine") tarball_fn="AOK-Alpine-${ALPINE_VERSION}-$AOK_VERSION" ;;

    "$distro_debian") tarball_fn="AOK-Debian-10-$AOK_VERSION" ;;

    "$distro_devuan") tarball_fn="AOK-Devuan-4-$AOK_VERSION" ;;

    "$destfs_select") tarball_fn="AOK-SelectDistro-$AOK_VERSION" ;;

    *)
        error_msg "Failed to identify prepared distro"
        ;;

    esac
    deploy_state_is_it "$deploy_state_pre_build" && tarball_fn="$tarball_fn-pb"
fi

#  Clear logged build-states etc, no longer needed

# set location
tarball="$build_base_d/$tarball_fn"

# echo "removing temp /dev items"
# rm  -f "$build_root_d"/dev/*

#
# Tar up and zip the result
#
cd "$build_root_d" || {
    error_msg "Failed to cd into: $build_root_d"
}

if $use_bzip2; then
    opts="cfj"
    tarball="${tarball}.tar.bz2"
    tarball_fn="${tarball_fn}.tar.bz2"
else
    opts="cfz"
    tarball="${tarball}.tgz"
    tarball_fn="${tarball_fn}.tgz"
fi

if $verbose; then
    opts="v$opts"
fi

msg_3 "Clearing some log files on client FS"
rm -f "${build_root_d}/var/log/fix_dev.log"
if [ -n "$LOG_FILE" ]; then
    msg_3 "Found a LOG_FILE, renamed to .old to give dest-system a fresh start"
    [ -f "${build_root_d}$LOG_FILE" ] && mv "${build_root_d}$LOG_FILE" \
        "${build_root_d}${LOG_FILE}.old"
fi

msg_1 "Creating image $tarball"
tar "$opts" "$tarball" .

#
# copy it to /iCloud if this runs on iSH
#

if this_is_ish && [ "$(find /iCloud/ -maxdepth 1 | wc -l)" -gt 1 ]; then
    msg_2 "Creating additional copy: $icloud_archive_d/$tarball_fn"
    mkdir -p "$icloud_archive_d"
    cp "$tarball" "$icloud_archive_d"
fi

if $verbose; then
    msg_1 "Image is ready - $tarball"
else
    msg_1 "Image is ready!"
fi
exit 0 #  Avoid exiting with error if above file did not exist
