#!/bin/sh
#
#  Part of https://github.com/jaclu/AOK-Filesystem-Tools
#
#  License: MIT
#
#  Copyright (c) 2021-2024: Jacob.Lundqvist@gmail.com
#
#  Replaces the Alpine wall that doesn't work in iSH
#  and the Debian wall, that only parially work in iSH-AOK
#
#  Be aware that unless you sudo wall, messages will most likely
#  not be displayed on the console, but inside tmux all panes
#  will be notified without sudo
#

show_help() {
    echo
    echo "Usage:"
    echo " wall [options] [<file> | <message>]"
    echo
    echo "Write a message to all users."
    echo
    echo "Options:"
    echo " -n, --nobanner          do not print banner, works only for root"
    echo
    echo " -h, --help              display this help"
    echo " -V, --version           display version"
}

show_version() {
    echo "AOK-FS wall inspired by util-linux 2.39.1"
}

#===============================================================
#
#   Main
#
#===============================================================

use_banner=1
uid="$(id | awk -F'[(=]' '{print $2}')"
sender="$(whoami)"

[ -d /proc/ish ] || {
    echo "This wall is only suitable for iSH!"
    exit 1
}

# execute again as root
if [ "$(whoami)" != "root" ]; then
    echo "Executing as root via sudo"
    # using $0 instead of full path makes location not hardcoded
    sudo "$0" -u "$sender" "$@" || {
        echo "ERROR: sudo failed"
        exit 1
    }
    exit 0
fi

while [ -n "$1" ]; do
    case "$1" in
    "-n" | "--nobanner")
        if [ "$uid" -ne 0 ]; then
            echo "wall: --nobanner is available only for root"
            exit 1
        fi
        use_banner=0
        ;;

    "-h" | "--help")
        show_help
        exit 0
        ;;

    "-u")
        if [ "$uid" -ne 0 ]; then
            # regular users cant spoof sender
            echo "wall: -u is available only for root"
            exit 1
        fi
        sender="$2"
        shift
        ;;

    "-V" | "--version")
        show_version
        exit 0
        ;;

    *)
        msg="$1"
        ;;
    esac
    shift
done

# get pts in fashion suitable for pgrep
cd /dev || {
    echo "ERROR: $0 - failed to cd /dev"
    exit 1
}

for pts in pts/*; do
    pgrep -t "$pts" >/dev/null || continue
    pts=/dev/"$pts" # back to normal notation
    (
        if [ "$use_banner" -eq 1 ]; then
            echo
            echo "Broadcast message from $sender@$(hostname) ($(date)):"
        fi
        echo
        if [ -f "$msg" ]; then
            cat "$msg"
        else
            echo "$msg"
        fi
        echo
    ) >"$pts"
done
