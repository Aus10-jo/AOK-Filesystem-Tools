#!/bin/sh
#
#  Part of https://github.com/jaclu/AOK-Filesystem-Tools
#
#  Copyright (c) 2024: Jacob.Lundqvist@gmail.com
#
#  License: MIT
#
#  This serves two purposes:
#
#  1> If lines like: ===  System startup  ===
#     can be found in /var/log/syslog, the corresponding timestamp
#     will be assumed to be iSH boot time, (will be off by a few seconds)
#     Those lines are generated by the AOK inittab and aok_launcher.
#     If it is not found this fallbacks to iOS boot time via /proc/uptime
#     for Debian and for Alpine, the regular uptime is run instead showing
#     the same iOS boot time.
#
#  2> In Debian on regular iSH, there is no /proc/loadavg
#     This causes the regular uptime to fail.
#     sysload is faked, always reporting 0.00
#     Be aware that the lack of /proc/loadavg also causes other tools
#     such as top & htop to fail!
#

show_help() {
    echo "
Usage:
 uptime [options]

Options:
 -p, --pretty   show uptime in pretty format
 -h, --help     display this help and exit
 -i, --ios      display iOS instead of iSH uptime
 -s, --since    system up since
 -V, --version  output version information and exit

For more details see uptime(1)."
    exit 0
}

org_uptime() {
    # Security check that it isnt linking to itself...
    $dbg && echo ">org_uptime()" >/dev/stderr

    _p="$(realpath "$(dirname -- "$0")")"
    f_this="$_p/$prog_name"
    cmd_org=/usr/bin/uptime

    [ -e /usr/bin/uptime ] || {
        cmd_busybox=/bin/busybox
        if [ -e "$cmd_busybox" ]; then
            echo "Linking $cmd_org to busybox"
            ln -sf "$cmd_busybox" "$cmd_org"
        else
            echo "ERROR: original $cmd_org unavailable!"
            exit 1
        fi
        unset cmd_busybox
    }

    [ "$(realpath "$cmd_org")" = "$f_this" ] && {
        echo "ERROR: $cmd_org points to this replacement uptime!"
        exit 1
    }
    $dbg && echo ">org_uptime() - running org_uptime" >/dev/stderr
    $cmd_org
}

calculate_ish_uptime() {
    $dbg && echo ">calculate_ish_uptime()" >/dev/stderr
    boot_time_epoch=$(date -d "$time_stamp_bootup" +%s)
    current_time=$(date +%s)
    uptime_seconds=$((current_time - boot_time_epoch))

    unset boot_time_epoch current_time
}

calculate_ios_uptime() {
    # Read the uptime from /proc/uptime
    $dbg && echo ">calculate_ios_uptime()" >/dev/stderr
    uptime_raw="$(cut -d' ' -f1 </proc/uptime)"

    if test -d /proc/ish && grep -qiv aok /proc/ish/version 2>/dev/null; then
        raw_s_hundreds="$(echo "$uptime_raw" | cut -d. -f1)"
        raw_s="$(echo "$uptime_raw" | cut -d. -f2)"
        uptime_seconds="$(echo "$raw_s_hundreds * 100 + $raw_s" | bc)"
    else
        uptime_seconds="$uptime_raw"
    fi

    unset uptime_raw
    unset raw_s_hundreds
    unset raw_s
}

calculate_uptime() {
    $dbg && echo ">calculate_uptime()" >/dev/stderr
    time_stamp_bootup="$(grep "System startup" /var/log/syslog |
        tail -n 1 | awk '{print $1" "$2}')"
    if [ -n "$time_stamp_bootup" ] && ! $force_ios_uptime; then
        calculate_ish_uptime
    elif [ -f /etc/alpine-release ] && [ -z "$alpine_options" ]; then
        #
        # if org_uptime is a binary and not a soft link to busybox
        # it would be able to handle options, but instead of detecting
        # that its simpler to use calculate_ios_uptime
        #
        org_uptime # use the normal uptime
        exit 0
    else
        calculate_ios_uptime
    fi

    $dbg && echo ">calculate_uptime() - doing the calculations" >/dev/stderr
    # Calculate days, hours, minutes, and seconds
    ut_weeks=$(echo "$uptime_seconds / 86400 / 7" | bc)
    ut_days=$(echo "$uptime_seconds / 86400" | bc)
    ut_hours=$(echo "($uptime_seconds % 86400) / 3600" | bc)
    ut_minutes=$(echo "($uptime_seconds % 3600) / 60" | bc)
    # ut_seconds=$(echo "$uptime_seconds % 60" | bc)
}

display_sysload() {
    $dbg && echo ">display_sysload()" >/dev/stderr
    if [ -f /etc/alpine-release ]; then
        $dbg && echo ">display_sysload() - using org_uptime" >/dev/stderr
        org_uptime | sed 's/load average: /|/' | cut -d'|' -f 2
    else
        echo "0.00, 0.00, 0.00"
    fi
}

show_pretty() {
    output="$ut_minutes minutes"
    [ "$ut_hours" -gt 0 ] && output="$ut_hours hours, $output"
    [ "$ut_days" -gt 0 ] && output="$ut_days days, $output"
    [ "$ut_weeks" -gt 0 ] && output="$ut_weeks weeks, $output"

    echo "up $output"
}

show_since() {
    date -d "$uptime_seconds seconds ago" "+%Y-%m-%d %H:%M:%S"
}

show_version() {
    _f=/etc/aok-fs-release
    if [ -f "$_f" ]; then
        aok_vers="$(cat "$_f")"
    else
        aok_vers="unknown AOK-FS version"
    fi
    echo "uptime from AOK-FS $aok_vers"

    unset aok_vers
}

default_view() {
    # Print the uptime in the format used by uptime command
    $dbg && echo ">default_view()" >/dev/stderr
    # < 1h
    # 17:42:51 up 27 min,  1 user,

    $dbg && echo ">default_view() - minutes" >/dev/stderr
    if [ "$ut_minutes" -lt 10 ]; then
        _minutes=$(printf "0%d" "$ut_minutes")
    else
        _minutes=$(printf "%d" "$ut_minutes")
    fi

    $dbg && echo ">default_view() - hours" >/dev/stderr
    if [ "$ut_hours" -lt 10 ]; then
        _hours=$(printf " %d" "$ut_hours")
    else
        _hours=$(printf "%d" "$ut_hours")
    fi

    output="$ut_minutes min"
    [ "$ut_hours" -gt 0 ] && output="$_hours:$_minutes"
    [ "$ut_days" -gt 0 ] && output="$ut_days days, $output"
    [ "$ut_weeks" -gt 0 ] && output="$ut_weeks weeks, $output"

    user_count="$(find /dev/pts/* | wc -l)"
    user_field="$user_count user"
    [ "$user_count" -gt 1 ] && user_field="${user_field}s"

    $dbg && echo ">default_view() - create output [$output] [$user_field]" >/dev/stderr
    _s=" $(date +%H:%M:%S) up $output,  $user_field,  load average:"
    _s="$_s $(display_sysload)"
    echo "$_s"
}

#===============================================================
#
#   Main
#
#===============================================================

force_ios_uptime=false
display_mode="default"
# if Alpine uptime is used this provides the desired options
alpine_options=""
dbg=false

prog_name="$(basename "$0")"

while [ -n "$1" ]; do
    case "$1" in
    -h | --help) show_help ;;
    -d) dbg=true ;;
    -i | --ios) force_ios_uptime=true ;;
    -p | --pretty)
        display_mode="pretty"
        alpine_options="$alpine_options -p"
        ;;
    -s | --since)
        display_mode="since"
        alpine_options="$alpine_options -s"
        ;;
    -V | --version) show_version ;;
    *)
        echo "uptime: invalid option -- '$1'"
        show_help
        ;;
    esac
    shift
done

calculate_uptime

case "$display_mode" in
default) default_view ;;
pretty) show_pretty ;;
since) show_since ;;
*)
    echo "Invalid display_mode [$display_mode]"
    ;;
esac
