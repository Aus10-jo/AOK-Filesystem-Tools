#!/bin/sh
#
#  Part of https://github.com/jaclu/AOK-Filesystem-Tools
#
#  License: MIT
#
#  Copyright (c) 2023-2024: Jacob.Lundqvist@gmail.com
#
#  Shuts dowwn openrc based systems
#
#  Using restart / stop - start
#  to ensure the process is taking place
#  Just doing start is not 100% to take effect
#  depending on service states
#
#  if first parameter is now, this will happen without delay
#  if there is an additional parameter, it will be used
#  in the system shutdown notice
#

display_msg() {
    dm_msg="$1"

    echo "$dm_msg"
    echo "$dm_msg" >/dev/console
    /usr/local/bin/logger shutdown "$dm_msg"
    unset dm_msg
}

# Define a function to handle Ctrl+C
interrupt_handler() {
    touch "$f_abort_shutdown"
    echo "Ctrl+C (SIGINT) received. Cancelling shutdown..."

    /usr/local/bin/wall -n "shutdown was canceled, the shutdown notice can be ignored"
}

#===============================================================
#
#   Main
#
#===============================================================

f_abort_shutdown=/tmp/abort_shutdown

rm -f "$f_abort_shutdown" # remove leftover if any

# execute again as root
if [ "$(whoami)" != "root" ]; then
    echo "Executing as root via sudo"
    # using $0 instead of full path makes location not hardcoded
    sudo "$0" "$@" || {
        echo "ERROR: sudo failed"
        exit 1
    }
    exit 0
fi

#
#  Set the interrupt_handler function to be called when Ctrl+C is pressed
#  Since this will wall announcing shutdown is cancelled, it is better
#  to activate after the initial wall is made
#
trap interrupt_handler INT

if ! mount | grep -qw "/"; then
    echo "WARNING: No / mounted, this seems to be chrooted, aborting"
    exit 2
fi

if [ "$1" = "now" ]; then
    shift # if there is also a shutdown notice...
    hold_time=0
else
    hold_time=10
fi

notification="

    *** SYSTEM SHUTDOWN NOTICE ***

"

#
#  Append param 1 if pressent on new line
#
[ -n "$1" ] && notification="${notification}
$*
"

if [ "$hold_time" != "0" ]; then
    notification="${notification}
$(hostname) will be shutdown in $hold_time seconds!!
"
fi

/usr/local/bin/wall "$notification"

if [ "$hold_time" != "0" ]; then
    echo
    echo "Abort shut down by hitting Ctrl-C within $hold_time secoonds"
    echo

    echo
    sleep "$hold_time"
fi

[ -f "$f_abort_shutdown" ] && {
    echo
    display_msg "Aborting shutdown"
    rm -f "$f_abort_shutdown"
    exit 1
}

_f=/usr/local/sbin/do-shutdown

#
# use backgrounding to avoid shutdown getting dropped if ssh connection
# is broken in shutdown procedured
#
$_f &

while true; do
    sleep 5
    echo "shutdown waiting for $_f to complete..."
done
