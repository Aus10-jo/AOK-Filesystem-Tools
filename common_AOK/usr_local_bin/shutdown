#!/bin/sh
#
#  Part of https://github.com/jaclu/AOK-Filesystem-Tools
#
#  License: MIT
#
#  Copyright (c) 2023: Jacob.Lundqvist@gmail.com
#
#  Shuts dowwn openrc based systems
#
#  Using restart / stop - start
#  to ensure the process is taking place
#  Just doing start is not 100% to take effect
#  depending on service states
#
#  if first parameter is now, this will happen without delay
#  if there is an additional parameter, it will be used
#  in the system shutdown notice
#

# Define a function to handle Ctrl+C
interrupt_handler() {
    echo "Ctrl+C (SIGINT) received. Cancelling shutdown..."

    /usr/local/bin/wall -n "shutdown was canceled, the shutdown notice can be ignored"
    exit 1
}

#
#  Set the interrupt_handler function to be called when Ctrl+C is pressed
#  Since this will wall announcing shutdown is cancelled, it is better
#  to activate after the initial wall is made
#
trap interrupt_handler INT

uid="$(id | awk -F'[(=]' '{print $2}')"
if [ "$uid" -ne 0 ]; then
    echo "ERROR: shutdown requires root privileges!"
    exit 1
fi

if ! mount | grep -qw "/"; then
    echo "WARNING: No / mounted, this seems to be chrooted, aborting"
    exit 2
fi

if [ "$1" = "now" ]; then
    shift # if there is also a shutdown notice...
    hold_time=0
else
    hold_time=10
fi

notification="

    *** SYSTEM SHUTDOWN NOTICE ***

$(hostname) will be shutdown in $hold_time seconds!!
"
#
#  Append param 1 if pressent on new line
#
[ -n "$1" ] && notification="${notification}
$*"

/usr/local/bin/wall "$notification"

if [ "$hold_time" != "0" ]; then
    echo
    echo "Abort shut down by hitting Ctrl-C within $hold_time secoonds"
    echo

    echo
    sleep "$hold_time"
fi

#
#  If this is done via remote connection, the openrc shutdown
#  step would most likely terminate the session, thereby pottentially
#  aborting the shutdown script before it completes.
#  Thus the actual shutdown is run in a separate backgrounded script
#  that will ignore if the triggering session disapears
#  Since do_shutdown will shut the system down without any warning,
#  it has no shebang, so intended shell must be mentioned by the caller.
#
(
    echo
    date
) >>/var/log/shutdown.log

#
#  Since do_shutdown does an instant shutdown, place it in /usr/local/lib
#  and dont give it a shebang. To minimize risk of unintentional triggering
#
/usr/local/sbin/do_shutdown nice &
