#!/bin/sh
#
#  Part of https://github.com/jaclu/AOK-Filesystem-Tools
#
#  License: MIT
#
#  Copyright (c) 2023-2024: Jacob.Lundqvist@gmail.com
#
#  Using this as Launch cmd, adds several features:
#   - It waits for openrc to reach runlevel default
#   - It displays network connection status
#   - Can login as a pre-defined user
#   - Optionally it will do continous logins, ie after session is ended
#     a new one is started
#
#  I first tried using a relaunch cmd triggering agetty in /etc/inittab
#    /sbin/agetty -a root pts/0 xterm-256color
#  but in my experimenting, I found that relaunch didnt trigger a new
#  agetty process once the first had timed out.
#
#  So I instead use this, run by 'Launch cmd' it will call $f_login_prog
#  directly to set up the user session
#

error_msg() {
    echo
    echo "ERROR[$0]: $1"
    echo
    log_it "$1"
}

log_it() {
    # In recovery-mode, skip logging to minimize risk of issues
    [ -f "$f_recovery_mode" ] && return

    # if no supported loggers are found, fall back to a non-dependency solution
    if [ -x "$cmd_logger" ]; then
        "$cmd_logger" "$prog_name" "$*"
    else
        echo "$(date +"%Y-%m-%d %H:%M:%S") ${prog_name}: $*" >>/var/log/messages
    fi
}

print_log() {
    #
    #  In case of bootup issues, this output is both displayed
    #  and logged to a file, so that it can be reviewed
    #  This is not used for all output, only "essentials" indicating
    #  statuses during startup
    #  For log only items, give noecho as 2nd param
    #
    msg="$1"

    [ "$2" != "noecho" ] && echo "$msg"
    #
    #  Since other tools launched by this might have changed it, set it
    #  here for now, later check if it is needed
    #
    log_it "$msg"
}

fix_stdio_device() {
    fsd_src="$1"
    fsd_name="/dev/$2"

    [ -z "$1" ] && error_msg "fix_stdio_device() - no param 1"
    [ -z "$2" ] && error_msg "fix_stdio_device($fsd_src,) - no param 2"

    [ -c "$fsd_name" ] || {
        echo "Fixing $fsd_name"
        rm -f "$fsd_name"
        ln -sf "$fsd_src" "$fsd_name"
    }
    return 0
}

check_for_bad_null() {
    bad_null="$1"
    [ -z "$bad_null" ] && {
        error_msg "call to check_for_bad_null() with no param"
    }
    [ -f "$bad_null" ] && {
        echo
        echo
        echo "WARNING: $bad_null found - typo in /dev/null redirect?"
        echo
    }
    return 0
}

verify_device() {
    vd_dev_name="$1"
    vd_maj="$2"
    vd_min="$3"
    [ -z "$vd_dev_name" ] && error_msg "verify_device() - no param 1"
    [ -z "$vd_maj" ] && error_msg "verify_device($vd_dev_name,,) - no param 2"
    [ -z "$vd_min" ] && error_msg "verify_device($vd_dev_name,$vd_maj,) - no param 3"

    [ -c "$vd_dev_name" ] || {
        rm -f "$vd_dev_name" && mknod -m 666 "$vd_dev_name" c "$vd_maj" "$vd_min"
        echo "Fixed $vd_dev_name"
    }
    unset vd_dev_name
    unset vd_maj
    unset vd_min
    return 0
}

verify_devs() {
    #
    #  Make sure all /dev entries are reasonable
    #
    [ ! -d /proc/ish ] && return # only do on ish

    fix_stdio_device /proc/self/fd/0 stdin
    fix_stdio_device /proc/self/fd/1 stdout
    fix_stdio_device /proc/self/fd/2 stderr

    check_for_bad_null /dev/nul
    check_for_bad_null /dev/nulll

    verify_device /dev/clipboard 240 0
    verify_device /dev/console 5 1
    verify_device /dev/full 1 7
    verify_device /dev/location 240 1
    verify_device /dev/null 1 3
    verify_device /dev/ptmx 5 2
    verify_device /dev/random 1 8
    verify_device /dev/tty 5 0
    verify_device /dev/tty1 4 1
    verify_device /dev/tty2 4 2
    verify_device /dev/urandom 1 9
    verify_device /dev/zero 1 5
}

update_deb_log_kill_cmd() {
    #
    #  Since the cmd_tail might change, always
    #  update the kill cmd to its current definition
    #
    _f=/usr/local/sbin/kill_tail_logging
    #region kill_tail_logging cmd
    echo "#!/bin/sh
#  Called from /usr/local/bin/console-restart
#  Replaced by /usr/local/sbin/aok_launcher during each reboot

(
    echo
    echo 'Console tailing of /var/log/* will be restarted'
    echo 'Non text-files will be ignored'
) >/dev/console

pgrep -f \"$cmd_tail\" | xargs -r kill
" >"$_f"
    #endregion
    chown root: "$_f"
    chmod 744 "$_f"
}

check_for_recovery_mode() {
    # Disable terminal line buffering and enable read without Enter
    stty -icanon min 0 time 0

    # Read a single character
    keypress=$(dd bs=1 count=1 2>/dev/null)

    # Revert terminal settings
    stty icanon

    # Check if a key was pressed
    case "$keypress" in
    "r" | "R")
        # First do urgent tasks that are somewhat time sensitive
        touch "$f_recovery_mode"
        trap '' INT # abort capturing Ctrl-C

        f_recovery_mode_log=/var/log/recovery-mode.log

        verify_devs
        echo
        echo "===  recovery-mode selected  ==="
        echo "---  Starting rescue shell - on exit, App will terminate."
        [ ! -f "$f_pts_0_as_console" ] && {
            echo "---  inittab acions cancelled by recovery-mode are logged in:"
            echo "---    $f_recovery_mode_log"
            echo "---  This file will be removed when exiting recovery-mode!"
        }
        #region recovery explaination
        echo "
---  Be aware, this is  /bin/sh  in order to maximize chances of recovery,
---  in case shell init-scripts are faulty. Most likely PATH is minimal!
"
        #endregion
        stty sane
        /bin/sh -i

        echo "Clearing recovery-mode"
        rm -f "$f_recovery_mode"
        rm -f "$f_recovery_mode_log"
        sleep 1
        exit 1 # exit App on iPad, reboot on iPhone
        ;;
    *) ;;
    esac
}

indicate_end_of_recovery_window() {
    if [ -f "$f_this_is_chrooted" ]; then
        #
        #  On iSH boot there is time to press r during boot wait
        #  when chrooted there is no boot wait, so we make a short wait
        #  instead, to make recovery available
        #
        sleep 0.7
    fi
    check_for_recovery_mode
    echo "recovery-mode no longer possible"
    echo
    # remove any left-over recovery logs
    rm -f /var/log/recovery-mode.log
}

display_header() {
    if [ -f "$f_aok_release" ]; then
        aok_vers="$(cat "$f_aok_release" 2>/dev/null)" ||
            aok_vers="*** Failed to read $f_aok_release ***"
    else
        aok_vers=Unknown
    fi

    if test -f "$f_rel_alpine"; then
        fs_name="Alpine $(cat "$f_rel_alpine" 2>/dev/null)" ||
            fs_name="Alpine Unknown"
    elif test -f "$f_rel_devuan"; then
        #
        #  Devuan must come before Debian, since it also has the
        #  f_rel_debian file
        #
        fs_name="Devuan $(cat "$f_rel_devuan" 2>/dev/null)" ||
            fs_name="Devuan Unknown"
    elif test -f "$f_rel_debian"; then
        fs_name="Debian $(cat "$f_rel_debian" 2>/dev/null)" ||
            fs_name="Debian Unknown"
    else
        fs_name=Unknown
    fi

    echo
    echo "aok_launcher - AOK: $aok_vers - Filesystem: $fs_name"
    [ -f "$f_pts_0_as_console" ] && {
        echo "/dev/pts/0 is used as /dev/console - " \
            "no session will be started on this vterm"
    }
    if $this_is_pts0 || [ -f "$f_this_is_chrooted" ]; then
        echo "Press 'r' during bootup for recovery-mode"
        echo
    fi

    unset aok_vers
    unset fs_name
}

kill_console_tail() {
    #
    #  Only usable by Alpine, Debian uses console-restart, since the tail
    #  cmd isnt properly tied to /dev/pts/0 and thus cant recieve Ctrl-C
    #
    echo
    echo "Console tailing of /var/log/* will be restarted"
    echo "Non text-files will be ignored"
    pgrep -f "$cmd_tail" | xargs -r kill
}

select_log_files_to_monitor() {
    #
    #  Add all text files in logdir
    #
    log_files=""
    d_logs=/var/log

    # shellcheck disable=SC2045
    for log_file in $(ls -t "$d_logs"); do
        #log_basename="$(basename "$logfile")"
        f_log_file="$d_logs/$log_file"
        [ ! -f "$f_log_file" ] && continue               # not a file
        file -b "$f_log_file" | grep -q text || continue # not a text file
        log_files="$log_files $f_log_file"
    done
}

handle_custom_console_monitor() {
    #
    #  If a custom console monitor is used, remember to touch
    #  $f_inittab_can_start once it is setup, so that inittab
    #  can commence its run
    #
    echo "><> running $cmd_custom_console_monitor"
    $cmd_custom_console_monitor "$boot_time"
    #
    #  Should not get here...
    #
    error_msg "exited: $cmd_custom_console_monitor"
    echo "Will shut down in 30s"
    sleep 30
    exit 1
}

monitor_log_files() {
    initial_console_run=true

    echo "Console tailing of /var/log/* - non text-files will be ignored"
    trap 'kill_console_tail' INT
    while true; do
        select_log_files_to_monitor
        if [ -f "$f_rel_alpine" ]; then
            # allow restart of tail cmd
            msg="Press Ctrl-C to re-read logfiles"
        else
            # Ctrl-C not usable for this on Debian...
            # this tail is not tied to a pts
            msg="Run console-restart to re-read logfiles"
        fi
        echo "Entries without timestamp are typically console printouts"
        echo "$msg"
        echo
        $initial_console_run && {
            initial_console_run=false
            (
                #
                # run in bg with a sleep so that tail can start
                # before inittab commences
                #
                sleep 1
                touch "$f_inittab_can_start"
            ) &
        }
        # shellcheck disable=SC2086 # log_files should be expanded
        $cmd_tail $log_files 2>/dev/null
        sleep 1
    done

    error_msg "Exited console monitoring loop - shouldnt happen"
    echo "Will shut down in 30s"
    sleep 30
    exit 1 # shouldnt get here, but just in case
}

bootup() {
    # at bootup also log it
    if [ -f "$f_pts_0_as_console" ]; then
        check_for_recovery_mode
        [ "$(stat -c "%t %T" /dev/console)" != "88 0" ] && {
            echo "Setting up /dev/pts/0 as console"
            rm -f /dev/console && mknod -m 222 /dev/console c 136 0
        }

        /usr/local/bin/network-check.sh
        indicate_end_of_recovery_window

        if [ -x "$cmd_custom_console_monitor" ]; then
            handle_custom_console_monitor
        else
            monitor_log_files
        fi
    else
        [ "$(stat -c "%t %T" /dev/console)" != "5 1" ] && {
            echo "Reverting console to normal mode"
            rm -f /dev/console && mknod -m 666 /dev/console c 5 1
        }
        /usr/local/bin/network-check.sh
        indicate_end_of_recovery_window
    fi

    if [ ! -f "$f_this_is_chrooted" ]; then
        runlevel_wait
    else
        echo
        echo "This is chrooted, so runlevel_wait & network check are skipped"
        echo
    fi
}

set_deploy_aok_abort() {
    trap '' INT # abort capturing Ctrl-C
    echo
    print_log "***  Aborting deploy, dropping to shell ***"
    echo
    /bin/bash
    exit 1
}

deploy_aok() {
    #
    #  During deploy triggered by aok, you can hit Ctrl-C to get a shell
    #  if you need to inspect something
    #
    trap 'set_deploy_aok_abort INT' INT
    #
    #  This is a new AOK-FS that has not yet completed its setup
    #  continue the deploy
    #
    indicate_end_of_recovery_window
    echo
    echo "******************************************************"
    echo "*                                                    *"
    echo "*   AOK-FS deploy has not completed, continuing it   *"
    echo "*                                                    *"
    echo "*   Deploy can be aborted by pressing Ctrl-C         *"
    echo "*                                                    *"
    echo "******************************************************"
    echo
    /usr/local/bin/network-check.sh

    da_depl_step="$(cat "$f_deploy_state")"
    /usr/local/bin/logger aok_launcher Triggering deploy step: "$da_depl_step"
    #  AOK-FS uses /etc/profile as placeholder for deploy steps
    if /etc/profile; then
        /usr/local/bin/logger aok_launcher Deploy completed - "$da_depl_step"
    else
        error_msg "returned from the deploy procedure!"
        echo "Since the File System probably is not fully deployed,"
        echo "it is impposisble to say if it is meaningfull to continue"
        echo "You have been warned..."
        echo
        sleep 3
        set_deploy_aok_abort
    fi
    trap '' INT # abort capturing Ctrl-C

    if [ -f "$f_deploy_state" ]; then
        echo
        echo "A new deploy state has been reached: $(cat "$f_deploy_state")"
        echo
        echo "It is recomended to reboot at this point"
        echo "to let the next step be processed."
        echo
        set_deploy_aok_abort
    fi

    echo
    echo "******************************************************"
    echo "*                                                    *"
    echo "*   Returned from deploy, resuming this Launch cmd   *"
    echo "*                                                    *"
    echo "*   A reboot is recomended,                          *"
    echo "*   to ensure all services are running.              *"
    echo "*                                                    *"
    echo "******************************************************"
    echo
    sleep 3
}

set_abort_runlevel_wait() {
    echo
    _s="***  Ctrl-C captured - aborting wait for runlevel"
    _s="$_s $expected_runlevel  ***"
    print_log "$_s"
    echo
    abort_runlevel_wait=1
}

runlevel_wait() {
    trap 'set_abort_runlevel_wait' INT

    while true; do
        check_for_recovery_mode
        current_runlevel="$(rc-status -r)"
        if [ "$current_runlevel" = "$expected_runlevel" ]; then
            echo "runlevel is now '$expected_runlevel'"
            break
        fi
        _s="current runlevel is $current_runlevel - waiting for"
        _s="$_s $expected_runlevel - press Ctrl-C to abort wait"
        sleep 2
        [ -f "$f_recovery_mode" ] && return
        [ "$abort_runlevel_wait" = "1" ] && break
    done
    trap '' INT # abort capturing Ctrl-C
    print_log "runlevel_wait completed, runlevel is now $(rc-status -r)" noecho
}

handle_etc_issue() {
    #
    #  I havent managed to get /etc/issue to display on console sessions.
    #  so manual handling
    #
    if [ -f "$f_issue_file" ] && [ -f "$f_profile_hints" ]; then
        echo
        cat "$f_issue_file"
    fi
}

login_with_param_check() {
    #
    #  Do this for each login, in case changes have been made
    #
    if [ "$ignore_login_params" != "1" ] &&
        [ -f "$f_login_default_user" ]; then

        def_user="$(cat "$f_login_default_user")"
        [ -n "$def_user" ] && {
            cut -d: -f 1 /etc/passwd | grep -qw "$def_user" || {
                echo
                _s="ERROR: default user for autologin: $def_user"
                _s="$_s is not valid"
                print_log "$_s"
                print_log "reverting to basic no params login"
                echo
                ignore_login_params=1
                #
                #  it should be safe to recuser once, sice param checks
                #  are disabled
                #
                login_with_param_check
                return
            }
        }
        print_log "auto-login as: $def_user - can be changed by running: aok"
        handle_etc_issue
        login_params="-f $def_user"
        print_log "Starting login with params: [$login_params]" noecho
        # shellcheck disable=SC2086
        "$f_login_prog" $login_params || {
            _excode="$?"
            echo
            _s="ERROR: $f_login_prog exited with: $_excode,"
            _s="$_s trying to use params: $login_params"
            print_log "$_s"
            print_log "reverting to basic no params login"
            echo
            ignore_login_params=1
            #
            #  it should be safe to recuser once, sice param checks
            #  are disabled
            #
            login_with_param_check
            return
        }
    else
        # print_log "Using bare bones login with no parameters"
        handle_etc_issue
        print_log "Starting login with no params" noecho
        "$f_login_prog" || {
            _excode="$?"
            error_msg "login exited with: $_excode"
        }
    fi
}

handle_logins() {
    while true; do
        #
        #  Ensure params are tried for each login attempt, in case they
        #  have been changed during the current session, and continous
        #  logins is set
        #
        ignore_login_params=0
        login_with_param_check
        login_ex_code="$?"
        [ "$login_ex_code" != "0" ] && {
            error_msg "$f_login_prog exited with: $login_ex_code"
        }

        if [ -f "$f_this_is_chrooted" ]; then
            _s="This is chrooted, always terminating on logout,"
            _s="$_s this should also exit the chroot"
            print_log "$_s"
            exit 0
        fi

        if [ -f "$f_logins_continous" ]; then
            echo
            _s="Will spawn a new login session. If this is not requested,"
            _s="$_s run aok"
            print_log "$_s"
            echo
            sleep 1
        else
            # echo
            # echo "To enable continous vterm sessions, run aok"
            if $this_is_pts0; then
                # echo
                # echo "Shutting down system..."
                # echo
                /usr/local/sbin/shutdown now
                sleep 30 # give shutdown plenty of time to complete
                exit     # this will insta-kill iSH
            else
                print_log "Terminating vterm $(tty)"
                sleep 2
                exit
            fi
        fi
    done

    _s="===  Fell out of infinite aok_launcher login loop -"
    _s="$_s Should really not happen!"
    print_log "$_s"
    echo "will sleep forever, please shutdown iSH"
    /bin/sleep infinity
}

#===============================================================
#
#   Main
#
#===============================================================

state_prefix=/etc/opt/AOK
f_pts_0_as_console="$state_prefix"/pts_0_as_console
f_recovery_mode="$state_prefix"/recovery-mode
f_inittab_can_start="$state_prefix"/inittab_can_start

#  Ensure no left-overs from a previous boot
rm -f "$f_inittab_can_start"
rm -f "$f_recovery_mode"

check_for_recovery_mode

prog_name=$(basename "$0")
expected_runlevel="default"
# f_status_log="/var/log/aok_launcher.log"
f_issue_file="/etc/issue"
f_login_prog="/bin/login"

f_deploy_state="$state_prefix"/deploy_state
f_logins_continous="$state_prefix"/login-continous
f_login_default_user="$state_prefix"/login-default-username
f_profile_hints="$state_prefix"/show_profile_hints
f_this_is_chrooted="$state_prefix"/this_fs_is_chrooted
f_aok_release=/etc/aok-fs-release
f_rel_alpine=/etc/alpine-release
f_rel_devuan=/etc/devuan_version
f_rel_debian=/etc/debian_version

cmd_logger=/usr/local/bin/logger
cmd_custom_console_monitor=/usr/local/sbin/custom_console_monitor
cmd_tail="tail -n 0 -f "

if [ "$(tty)" = "/dev/pts/0" ]; then
    this_is_pts0=true
else
    this_is_pts0=false
fi
check_for_recovery_mode
$this_is_pts0 && {
    boot_time=$(date '+%Y-%m-%d %H:%M:%S')
    echo "Booted at: $boot_time"
}

verify_devs
[ -f "$f_rel_debian" ] && update_deb_log_kill_cmd
check_for_recovery_mode
display_header

#  If deploy has not completed - handle it
if [ -f "$f_deploy_state" ]; then
    deploy_aok
else
    if $this_is_pts0; then
        bootup # if /dev/console is used, pts/0 will not exit this
    else
        /usr/local/bin/network-check.sh
    fi
fi

[ -f "$f_this_is_chrooted" ] && indicate_end_of_recovery_window
handle_logins
