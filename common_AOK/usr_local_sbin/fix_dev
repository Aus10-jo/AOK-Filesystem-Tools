#!/bin/sh
#
#  Part of https://github.com/jaclu/AOK-Filesystem-Tools
#
#  License: MIT
#
#  Copyright (c) 2023: Jacob.Lundqvist@gmail.com
#
#  Ensures iSH /dev entries are good
#
#  Normally this will refuse to run if not started from init.
#  During setup, when this isnt in inittab yet, this check can be
#  ignored with the param: ignore_init_check
#
#  This allows a deploy script to run fix_dev in order to ensure no
#  device weirdness is pressent
#

log_it() {
    msg="$1"
    ex_code="$2"
    #
    #  param 2 indicates this should also be printed, if it is > -1
    #  it will be used as an exit code
    #
    echo "[$(date)] $msg" >>"$log_file"

    if [ -n "$ex_code" ]; then
        echo "$msg"
        if [ "$ex_code" -gt -1 ]; then
            clear_pidfile
            exit "$ex_code"
        fi
    fi
}

clear_pidfile() {
    rm -f "$pid_file"
}

this_is_ish() {
    test -d /proc/ish
}

is_char_dev() {
    _d="$1"
    if [ -z "$_d" ]; then
        log_it "ERROR: is_char_dev() - called without param!" -1
        return 1
    elif [ ! -e "$_d" ]; then
        log_it "ERROR: is_char_dev($_d) - dev does not exist!" -1
        return 1
    fi

    #  Return status
    if [ -c "$_d" ]; then
        # log_it "ok_dev: $_d" -1
        return 0
    else
        log_it "WARNING: $_d not a chardev, will run this  again!" -1
        log_it "$(ls -l "$_d")" -1
        return 1
    fi
}

#===============================================================
#
#   Main
#
#===============================================================

log_file="/var/log/fix_dev.log"

# log_it "Skipping fix_dev for now" 0

#
#  When pressent fix_dev is running, so other processes during early
#  startup should hold whilst this exists
#
pid_file="/run/fixdev.pid"

skip_init_check="ignore_init_check"

if ! this_is_ish; then
    log_it "WARNING: Not iSH kernel, skipping fix_dev" 0
fi
if [ "$(uname)" = "Darwin" ]; then
    log_it "Don't run this on MacOS!!" 1
fi

if [ -e /etc/opt/this_fs_is_chrooted ]; then
    log_it "WARNING: chrooted, Skipping fix_dev" 0
fi

if [ "$1" != "$skip_init_check" ]; then
    #
    #  In AOK FS running on Debian this is started from a secondary init
    #  (investigating) so minimum 3, sometimes it gets 4
    #
    # init(1)-+-init(3)---fix_dev(4)---pstree(7)
    #         `-login(2)---sh(6)---run-parts(8)
    #
    if [ "$PPID" -gt 4 ]; then
        #
        #  If it was started from other source than inittab, but not
        #  yet pressent in inittab, it is not considered an error
        #
        if grep -q sbin/fix_dev /etc/inittab; then
            log_it "ALERT: Not started from init, parent is ($PPID) - exiting" 0
        fi
        log_it "Not started from inittab" -1
        [ -n "$log_file" ] && pstree -p >>"$log_file"
    fi
else
    log_it "Allowed to run outside init due to $skip_init_check"
fi

#
#  This should only run from init, so it is safe to ignore any previous
#  content in the pidfile
#
echo "$$" >"$pid_file"


while true; do
    log_it "fixing devs" -1
    # parenthesis, so this can be copy pasted into a single action
    (
        rm -f /dev/null && mknod -m 666 /dev/null c 1 3
        rm -f /dev/clipboard && mknod -m 666 /dev/clipboard c 240 0
        rm -f /dev/console && mknod -m 666 /dev/console c 5 1
        rm -f /dev/full && mknod -m 666 /dev/full c 1 7
        rm -f /dev/location && mknod -m 666 /dev/location c 240 1
        rm -f /dev/ptmx && mknod -m 666 /dev/ptmx c 5 2
        rm -f /dev/random && mknod -m 666 /dev/random c 1 8
        rm -f /dev/tty && mknod -m 666 /dev/tty c 5 0
        rm -f /dev/tty1 && mknod -m 666 /dev/tty1 c 4 1
        rm -f /dev/urandom && mknod -m 666 /dev/urandom c 1 9
        rm -f /dev/zero && mknod -m 666 /dev/zero c 1 5

    )

    is_char_dev /dev/null &&
        is_char_dev /dev/clipboard &&
        is_char_dev /dev/console &&
        is_char_dev /dev/full &&
        is_char_dev /dev/location &&
        is_char_dev /dev/ptmx &&
        is_char_dev /dev/random &&
        is_char_dev /dev/tty &&
        is_char_dev /dev/tty1 &&
        is_char_dev /dev/urandom &&
        is_char_dev /dev/zero &&
        break

    log_it "Some check failed, will try to fix devices again" -1
    sleep 1
done

# The following is needed for upstream PR #1716
if [ ! -L /dev/fd ]; then
    ln -sf /proc/self/fd /dev/fd
fi

# Debug log
log_it "fix_dev - done" -1

clear_pidfile
