#!/bin/sh
# This is sourced. Fake bang-path to help editors and linters
#  shellcheck disable=SC2034

#
#  Part of https://github.com/emkey1/AOK-Filesystem-Tools
#
#  License: MIT
#
#  Environment variables used when building the AOK-FS
#


#
#  First case used when inside the Filesystem
#  second case used during build
#
if [ -f ./AOK_VARS ]; then
    . ./AOK_VARS || exit 1
else
    #  shellcheck disable=SC1091
    . /AOK/AOK_VARS || exit 1
fi

# Shorthands for some directories
BUILD_BASE_D="/tmp/AOK"
BUILD_ROOT_D="$BUILD_BASE_D/iSH-AOK-FS"
MINIROOT_FS_CACHE_D="/tmp/Alpine_miniroot_fs_cache"

# extract the release/branch/major version, gives something like 3.14
ALPINE_RELEASE="$(echo "$ALPINE_VERSION" | cut -d"." -f 1,2)"


# mini-root fs to be downloaded and used
MINIROOT_FS="alpine-minirootfs-${ALPINE_VERSION}-x86.tar.gz"

# image name for AOK builds
AOK_FS="Alpine_${ALPINE_VERSION}-iSH-AOK_${AOK_VERSION}.tgz"

# image name for generic builds
BASIC_FS="Alpine-${ALPINE_VERSION}-iSH.tgz"


#  Where all aok content gets installed on destination FS
#  to refer to this location from the build env, use $BUILD_ROOT_D/$AOK_CONTENT
AOK_CONTENT="/AOK"

#
#  Either run this script chrooted if the host OS supports it, or run it
#  inside iSH-AOK once it has booted this FS
#
SETUP_AOK_FS="$AOK_CONTENT/aok_setup_fs"

# If this is run on an iSH node, the image is copied to this location
ICLOUD_ARCHIVE_D="/iCloud/AOK_Archive"

#
# Hint to iSH this is the first time booting. Checked for by
# /usr/local/bin/post_boot.sh
#
FIRST_BOOT_NOT_DONE_HINT="/etc/FIRSTBOOT"

ADDITIONAL_TASKS_SCRIPT="/etc/opt/additional_tasks"
#
#  How long the introduction should be displayed when the system is setup
#  during first boot
#
FIRST_BOOT_INTRODUCTION_DISPLAY_TIME=15


#
#  After all packages are installed, if /bin/login was something other than
#  a soft-link to /bin/busybox, it will be renamed to this, so it can be
#  selected later.
#
LOGIN_ORIGINAL="/bin/login.alpine"


#
#  Detecting build environments
#  0 = other, not able to chroot to complete image
#  1 = iSH
#  2 = Linux (x86)
#
if [ -d "/proc/ish" ]; then
    build_env=1
elif uname -a | grep -qi linux && uname -a | grep -q x86; then
    build_env=2
else
    build_env=0  # chroot not possible
fi


is_aok_kernel() {
    grep -qi aok /proc/ish/version 2> /dev/null
    return $?
}

run_additional_tasks_if_found() {
    if [ -n "$ADDITIONAL_TASKS_SCRIPT" ]; then
        if [ -x "$ADDITIONAL_TASKS_SCRIPT" ]; then
            echo
            echo "Running additional setup tasks"
            echo
            $ADDITIONAL_TASKS_SCRIPT
            rm "$ADDITIONAL_TASKS_SCRIPT"
        fi
    fi
}
