#!/bin/sh
#  shellcheck disable=SC2154
#
#  Part of https://github.com/emkey1/AOK-Filesystem-Tools
#
#  License: MIT
#
#  Creates a Linux FS image suitable for mounting on iSH
#
#  Primary purpose is to create iSH-AOK file systems, but can also be used
#  to create bare-bones Alpine-Linux file systems.
#
version="2.0.0-a"

#  shellcheck disable=SC1007
prog_name=$(basename "$0")

#  shellcheck disable=SC1091
. /opt/AOK/BUILD_ENV

#
#  Point to AOK-Filesystem-Tools dir, in case this was run with a path
#
#  shellcheck disable=SC1007
cd "$AOK_CONTENT" || exit 1

verbose=false           # true displays tar/untar progress
use_bzip2=false         # Use tgz when compressing image
build_debian_FS=false   # true means build Debian FS
distro_select=false     # true means choose between Alpine and Debian
pre_build_FS=false      # true meand generat4 pre-built FS
aok_FS_do_compress=true # compress FS at end of build_fs

aok_files="${BUILD_ROOT_D}${AOK_CONTENT}"

show_help() { # Multi OK 1
    cat <<EOF
$prog_name, version $version

Usage: $prog_name [-h] [-v] [-p] [-c] [-z] [-u]

This builds the iSH-AOK filesystem.

Default is to setup a minimal FS to be completed when deployed, this creates
far smaller image files, at the cost of taking a couple of minutes to complete
on the device upon first boot.

Available options:

-h  --help         Print this help and exit
-V  --version      Show version and exit
-v  --verbose      Displays extra info, like untaring/taring progress
-s  --select       Offer selection between Alpine & Debian on first boot.
-d  --debian       Build a Debian FS.
-p  --prebuilt     Build the entire FS on the running platform, making for quicker
                   imports on target device, but 10 times larger image files.
                   This can only be done on iSH or Linux (x86)!
-j  --bzip2        Use bzip2 compression for distribution
-N  --no_compress  Terminates when FS is prepared, giving you the opportunity to
                   chroot into it and do your personal adaptations.
                   Instructions about this procedure and howto then complete
                   the build once done will be displayed at the end of the build.
EOF
    exit 0
}

parse_arguments() { # Multi OK 1
    while [ -n "$1" ]; do

        case "$1" in

        "-h" | "--help") show_help ;;

        "-V" | "--version") show_version ;;

        "-v" | "--verbose") verbose=true ;;

        "-d" | "--debian") build_debian_FS=true ;;

        "-s" | "--select")
            if $pre_build_FS; then
                echo "-p and -d can not be combined!"
                exit 1
            fi
            distro_select=true
            ;;

        "-p" | "--prebuilt")
            if $distro_select; then
                echo "-p and -d can not be combined!"
                exit 1
            fi
            pre_build_FS=true
            ;;

        "-j" | "--bzip2") use_bzip2=true ;;

        "-N" | "--no_compress") aok_FS_do_compress=false ;;

        *)
            echo "ERROR: bad param, try -h"
            exit 1
            ;;

        esac
        shift
    done
}

show_version() { # Multi OK 1
    echo "$prog_name $version"
    exit 0
}

ensure_usable_wget() {
    msg_2 "ensure_usable_wget()"
    #  shellcheck disable=SC2010
    if ls -l "$(command -v wget)" | grep -q busybox; then
        error_msg "You need to install a real wget, busybox does not handle redirects"
    fi
    # msg_3 "ensure_usable_wget()  done"
}

display_build_env() { # Multi OK 1
    #
    #  Displaying build environment
    #
    [ "$BUILD_ENV" -eq 1 ] && run_mode="Building on iSH"
    [ "$BUILD_ENV" -eq 2 ] && run_mode="Building on x86 Linux"

    if ! $pre_build_FS; then
        run_mode="Will not chroot"
        run_mode="$run_mode, $AOK_CONTENT files will be copied"
    elif [ "$BUILD_ENV" -eq 0 ]; then
        echo "Unfortunately you can not chroot into the image on this device"
        echo "This is only supported on iSH and Linux(x86)"
        echo "You must build using -m or -M on this platform (try -h for help)"
        exit 1
    fi
    msg_1 "Run mode: $run_mode"

    if [ "$(whoami)" != "root" ]; then
        # Must come after help display, to avoid infinite loop
        "$0" -h
        error_msg "This must be run as root or using sudo!"
    fi

    # if build_status_get "$STATUS_BEING_BUILT" ; then
    #     error_msg "Can't build a new env whilst the current is being built!"
    # fi
    if [ -d "$BUILD_ROOT_D/dev" ] && [ "$(find "$BUILD_ROOT_D"/dev | wc -l)" -gt 1 ]; then
        echo "ERROR: Active chroot session detected!"
        echo "       If this is due to a crash or abort, you can clear it by running:"
        echo "         sudo ./tools/do_chroot.sh -c"
        echo
        exit 1
    fi

    msg_1 "Building a $ALPINE_RELEASE  filesystem"

    if ! $aok_FS_do_compress; then
        msg_2 "*** Will not create the compressed image! ***"
    fi
    echo
}

clear_build_env() { # Multi OK 1
    msg_2 "clear_build_env()"
    #
    # Clear build env
    #
    if ! rm -rf "$BUILD_BASE_D"; then
        echo
        echo "ERROR: Could not clear $BUILD_BASE_D"
        echo
        exit 1
    fi
    # msg_3 "clear_build_env() done"
}

cache_miniroot_fs() { # Multi OK 1
    msg_2 "cache_miniroot_fs()"
    #
    #  Create miniroot fs cache dir if not present, cd to it and if download
    #  miniroot fs if not cached
    #
    ensure_usable_wget

    if [ ! -d "$MINIROOT_FS_CACHE_D" ]; then
        mkdir -p "$MINIROOT_FS_CACHE_D"
    fi
    cd "$MINIROOT_FS_CACHE_D" || exit 1

    # Download the Alpine miniroot if we need to
    if [ ! -f "$MINIROOT_TARBALL" ]; then
        msg_3 "Caching miniroot tarball"
        wget "https://dl-cdn.alpinelinux.org/alpine/v$ALPINE_RELEASE/releases/x86/$MINIROOT_TARBALL"
    fi
    # msg_3 "cache_miniroot_fs() done"
}

cache_Debian_fs() {
    msg_2 "cache_Debian_fs()"
    ensure_usable_wget

    if [ ! -d "$DEBIAN_FS_CACHE_D" ]; then
        mkdir -p "$DEBIAN_FS_CACHE_D"
    fi
    cd "$DEBIAN_FS_CACHE_D" || {
        error_msg "Failed to cd to debian cache"
    }

    if [ ! -f "$DEBIAN_TARBALL" ]; then
        wget "$DEBIAN_IMAGE"
    fi
    # msg_3 "cache_Debian_fs() done"
}

integrate_overrides() {
    conf_file="$1"
    case "$conf_file" in

    AOK_VARS | BUILD_ENV) ;;

    *)
        echo "ERROR: integrate_overrides($conf_file) - bad param"
        exit 1
        ;;

    esac

    if [ -f "$AOK_CONTENT"/."$conf_file" ]; then
        msg_3 "adding .$conf_file  into $conf_file on destination"
        {
            echo
            echo "# ---   inherrited overrides   ---"
            echo
        } >>"$aok_files"/"$conf_file"
        cat "$AOK_CONTENT"/."$conf_file" >>"$aok_files"/"$conf_file"
    fi
}

copy_AOK_to_dest() {
    #
    #  Copy AOK content to destination
    #
    msg_2 "copy_AOK_to_dest()"

    mkdir -p "$aok_files"
    mkdir -p "$BUILD_ROOT_D"/etc/opt
    build_status_set "$STATUS_BEING_BUILT"

    rsync -ah \
        --exclude=.git/ \
        --exclude=.gitignore \
        --exclude=.gitmodules \
        --exclude=.vscode/ \
        --exclude=.AOK_VARS \
        --exclude=.BUILD_ENV \
        "$AOK_CONTENT" "$BUILD_ROOT_D"/opt

    integrate_overrides AOK_VARS
    integrate_overrides BUILD_ENV

    chown -R root: "$aok_files"
    # msg_3 "copy_AOK_to_dest() done"
}

add_additional_tasks_if_defined() {
    #
    #  If defined, append additional tasks
    #
    msg_2 "add_additional_tasks_if_defined($FIRST_BOOT_ADDITIONAL_TASKS)"
    if [ -n "$FIRST_BOOT_ADDITIONAL_TASKS" ]; then
        msg_3 "Creating additional tasks script"
        add_task_dest="$BUILD_ROOT_D"/opt
        mkdir -p "$add_task_dest"
        {
            echo "#!/bin/sh"
            echo "$FIRST_BOOT_ADDITIONAL_TASKS"
        } >"$ADDITIONAL_TASKS_SCRIPT"
        chmod 755 "$ADDITIONAL_TASKS_SCRIPT"
        msg_2 "setup FIRST_BOOT_ADDITIONAL_TASKS to be run in $ADDITIONAL_TASKS_SCRIPT"
    fi
    # msg_3 "add_additional_tasks_if_defined() done"
}

chroot_if_possible() {
    action="$1"
    [ -z "$action" ] && error_msg "chroot_if_possible() no param"
    if [ "$BUILD_ENV" -gt 0 ]; then
        msg_3 "chrooting: $action"
        if ! "$AOK_CONTENT"/tools/do_chroot.sh "$action"; then
            error_msg "in chroot, aborting build!"
        fi
    else
        msg_2 "Could not chroot, did not run: $action"
    fi

}

setup_Alpine_in_advance() {
    msg_2 "setup_Alpine_in_advance()"
    mkdir -p /etc/opt

    #  Indicate this FS is pre-built
    build_status_set "$STATUS_PREBUILT_FS"

    #
    # chrooting and doing setup
    #
    msg_1 "Pre-building FS"
    if ! "$AOK_CONTENT"/tools/do_chroot.sh "$SETUP_ALPINE_FS"; then
        error_msg "in chroot, aborting build!"
    fi
    select_profile "$PROFILE_ALPINE_PRE_BUILT"

    #
    #  Since some final steps need to run by the above profile
    #  mark the FS as in build state
    #
    build_status_set "$STATUS_BEING_BUILT"
}

setup_Alpine_on_1st_boot() {
    msg_2 "setup_Alpine_on_1st_boot()"
    # by setting this as the first of two, this will become the default profile
    # when install is completed
    select_profile "$PROFILE_ALPINE_DEPLOY_ON_DEST"
}

setup_Debian() {
    msg_2 "setup_Debian()"
    "$SETUP_DEBIAN"
}

select_distro_on_1st_boot() {
    msg_2 "select_distro_on_1st_boot()"
    msg_1 "Preparing for distro selections"
    #
    #  If this build platform cant chroot, then the preparational steps
    #  will be run on 1st boot, a slight delay, but end result is
    #  the same.
    #
    chroot_if_possible "$SETUP_CHOOSE_DISTRO_PREPARE"

    select_profile "$PROFILE_CHOOSE_DISTRO"
    # msg_3 "select_distro_on_1st_boot()  done"
}

display_build_time() {
    duration="$(($(date +%s) - t_start))"
    display_time_elapsed "$duration" "Build FS"
}

#===============================================================
#
#   Main
#
#===============================================================

t_start="$(date +%s)"

parse_arguments "$@"

display_build_env

test -f "$ADDITIONAL_TASKS_SCRIPT" && notification_additional_tasks

msg_2 "Preparing build environment"

clear_build_env

if $build_debian_FS; then
    msg_2 "Create $BUILD_ROOT_D, copy Debian FS"
    cache_Debian_fs
    mkdir -p "$BUILD_ROOT_D"
    cd "$BUILD_ROOT_D" || exit 1
    msg_2 "Extracting Debian tarball"
    if $verbose; then
        options="xfvj"
    else
        options="xfj"
    fi
    tar "$options" "$DEBIAN_FS_CACHE_D/$DEBIAN_TARBALL" || {
        echo "ERROR: Failed to untar Debian-fs"
        echo
        echo "Try to remove the cached file and run this again"
        echo "$DEBIAN_FS_CACHE_D/$DEBIAN_TARBALL"
        exit 1
    }
else
    msg_2 "Create $BUILD_ROOT_D, copy minirootfs"
    cache_miniroot_fs
    mkdir -p "$BUILD_ROOT_D"
    cd "$BUILD_ROOT_D" || exit 1
    if $verbose; then
        options="xfvz"
    else
        options="xfz"
    fi
    tar "$options" "$MINIROOT_FS_CACHE_D"/"$MINIROOT_TARBALL" || {
        echo "ERROR: Failed to untar root-fs"
        echo
        echo "Try to remove the cached file and run this again"
        echo "$MINIROOT_FS_CACHE_D/$MINIROOT_TARBALL"
        exit 1
    }
fi

copy_AOK_to_dest
msg_2 "Stored $AOK_CONTENT on new filesystem"

add_additional_tasks_if_defined

if $pre_build_FS; then
    setup_Alpine_in_advance
elif $build_debian_FS; then
    select_profile "$PROFILE_DEBIAN_COMPLETE_DEPLOY"
elif $distro_select; then
    select_distro_on_1st_boot
else
    setup_Alpine_on_1st_boot
fi
#
#  Alpine initial motd suggests running setup-alpine. Not available on iSH
#  Since SETUP_ALPINE_FS will create an AOK relevant motd,
#  deleting the default one makes sence.
#
rm "$BUILD_ROOT_D"/etc/motd
msg_2 "removed initial /etc/motd from new filesystem"

# Should always happen
msg_2 "created directory /iCloud inside new filesystem"
mkdir "$BUILD_ROOT_D"/iCloud

msg_1 "The filesystem is ready!"

#
#  Consider to generate a tarball
#
if $aok_FS_do_compress; then
    extra_params=""
    if $verbose; then
        extra_params="-v"
    fi
    if $use_bzip2; then
        extra_params="$extra_params -j"
    fi

    #
    #  Set name for tarball
    #
    if $build_debian_FS; then
        label="$DEBIAN_FS"
    elif $distro_select; then
        #  shellcheck disable=SC2154
        label="$SELECT_DISTRO_FS"
    else
        label="$ALPINE_FS"
    fi

    #  shellcheck disable=SC2086,SC2248
    if ! "$AOK_CONTENT"/compress_image -l $label $extra_params; then
        error_msg "detected in compress_image"
    fi
    display_build_time
else
    if [ "$BUILD_ENV" -gt 0 ]; then
        if $pre_build_FS; then
            set_shell=""
        else
            set_shell="/bin/ash"
        fi
        echo "You can work on the filesystem by running:"
        echo "  sudo tools/do_chroot.sh $set_shell"
        echo
    fi

    echo "Complete the process by running:"
    echo "  sudo ./compress_image"
    echo
    echo "This creates the compressed image that can be imported into AOK/iSH."

    if [ "$BUILD_ENV" -gt 0 ]; then
        echo "You can revisit the filesystem by doing the above do_chroot and then"
        echo "compress_image again, in case you need to do further tweaks."
        echo "Running build again will erase the current iSH filesystem and create"
        echo "a fresh instance."
    fi
    echo
    display_build_time
    exit 0
fi
