#!/bin/sh
#
#  shellcheck disable=SC2154
#
#  Part of https://github.com/emkey1/AOK-Filesystem-Tools
#
#  License: MIT
#
#  Creates a FS image suitable for mounting on iSH, the build should
#  be able to complete on any platform.
#  Some options needs chrooting, those steps can only be done when
#  running iSH or Linux(x86)
#

show_help() { # Multi OK 1
    echo "Usage: $prog_name [-h] [-v] [-p] [-c] [-z] [-u]

This builds the iSH-AOK filesystem.

Default is to setup a minimal FS to be completed when deployed, this creates
far smaller image files, at the cost of taking a couple of minutes to complete
on the device upon first boot.

Available options:

-h  --help         Print this help and exit
-v  --verbose      Displays extra info, like untaring/taring progress
-s  --select       Offer selection between Alpine, Debian & Devuan on first boot.
-d  --debian       Build a Debian FS.
-D  --devuan       Build a Devuan FS.
-p  --prebuilt     Build the entire FS on the running platform, making
                   for quicker imports on target device, but up to 10
                   times larger image file.
                   This can only be done on iSH or Linux (x86)!
-c  --clear        Empty the build env ($build_root_d)
-C  --full_clear   Do a clear, and in addition clear the download cache
-j  --bzip2        Use bzip2 compression for distribution
-N  --no_compress  Terminates when FS is prepared, without generating
                   a FS tarball."
    exit 0
}

check_dependencies() {

    _deps=""
    [ -z "$(command -v rsync)" ] && _deps="$_deps rsync"
    _wget_cmd="$(command -v wget)"
    if [ -n "$_wget_cmd" ] && readlink "$_wget_cmd" | grep -q busybox; then
        _deps="$_deps wget"
        _additional_msg="You need to install a real wget, the busybox one does not handle redirects"
    fi
    [ -z "$_wget_cmd" ] && _deps="$_deps wget"
    [ -z "$_deps" ] && return

    msg_1 "In order for this to work you need to install some dependencies"

    if [ -n "$_additional_msg" ]; then
        echo "$_additional_msg"
        echo
    fi

    echo "Here are instructions how to install this on your platform:"
    echo

    case "$(hostfs_detect)" in

    "$distro_alpine")
        echo "apk add $_deps"
        ;;
    "$distro_debian" | "$distro_devuan")
        echo "apt install $_deps"
        ;;
    *)
        echo "Platform not recognized, can not suggest how to install"
        echo "You need the following items: $_deps"
        ;;
    esac

    error_msg "This needs to be resolved"
}

parse_arguments() { # Multi OK 1
    while [ -n "$1" ]; do

        case "$1" in

        "-h" | "--help") show_help ;;

        "-v" | "--verbose") verbose=true ;;

        "-d" | "--debian")
            if [ "$build_target" = "$destfs_select" ]; then
                echo "-d and -s can not be combined!"
                exit 1
            fi
            build_target="$distro_debian"
            ;;

        "-D" | "--devuan")
            if [ "$build_target" = "$destfs_select" ]; then
                echo "-D and -s can not be combined!"
                exit 1
            fi
            build_target="$distro_devuan"
            ;;

        "-s" | "--select")
            if [ "$build_target" = "$distro_debian" ] ||
                [ "$build_target" = "$distro_devuan" ]; then
                echo "-d/-D and -s can not be combined!"
                exit 1
            fi
            if $pre_build_FS; then
                echo "-p and -s can not be combined!"
                exit 1
            fi
            build_target="$destfs_select"
            ;;

        "-p" | "--prebuilt")
            if [ "$build_target" = "$destfs_select" ]; then
                echo "-p and -s can not be combined!"
                exit 1
            fi
            pre_build_FS=true
            ;;

        "-c" | "--clear")
            do_clear
            exit 0
            ;;

        "-C" | "--full_clear")
            do_clear
            do_full_clear
            exit 0
            ;;

        "-j" | "--bzip2")
            if ! $aok_FS_do_compress; then
                echo "-j and -N can not be combined!"
                exit 1
            fi
            use_bzip2=true
            ;;

        "-N" | "--no_compress")
            if $use_bzip2; then
                echo "-j and -N can not be combined!"
                exit 1
            fi
            aok_FS_do_compress=false
            ;;

        *)
            echo "ERROR: bad param, try -h"
            exit 1
            ;;

        esac
        shift
    done
}

do_clear() {

    # msg_2 "do_clear()"

    [ -z "$pidfile_do_chroot" ] && error_msg "pidfile_do_chroot is undefined!"
    [ -f "$pidfile_do_chroot" ] && error_msg "do_chroot.sh seems to be running!"

    [ ! -e "$build_root_d" ] && error_msg "Buildenv not pressent: $build_root_d"
    rm -rf "$build_root_d"
    [ -e "$build_root_d" ] && error_msg "Failed to clear: $build_root_d"
    # msg_3 "do_clear() - done"
}

do_full_clear() {
    # msg_2 "do_full_clear()"
    [ -e "$src_img_cache_d" ] && rm -rf "$src_img_cache_d"
    [ -e "$src_img_cache_d" ] && error_msg "Failed to clear: $src_img_cache_d"
    # msg_3 "do_full_clear() - done"
}

display_build_target() { # Multi OK 1
    #
    #  Displaying build environment
    #
    [ "$build_env" -eq 1 ] && dbt_run_mode="Building on iSH"
    [ "$build_env" -eq 2 ] && dbt_run_mode="Building on x86 Linux"

    if ! $pre_build_FS; then
        dbt_run_mode="Will not chroot"
    elif [ "$build_env" -eq 0 ]; then
        echo "Unfortunately, you can not chroot into the image on this device"
        echo "This is only supported on iSH and Linux(x86)"
        echo "Use another build option (try -h for help)"
        exit 1
    fi
    msg_1 "Run mode: $dbt_run_mode"
    unset dbt_run_mode

    if [ "$QUICK_DEPLOY" -ne 0 ]; then
        echo
        echo "**  Using QUICK_DEPLOY=$QUICK_DEPLOY  **"
    fi

    if [ "$(whoami)" != "root" ]; then
        # Must come after help display, to avoid infinite loop
        "$0" -h
        error_msg "This must be run as root or using sudo!"
    fi

    if [ "$(find "$build_root_d"/dev 2>/dev/null | wc -l)" -gt 2 ]; then
        echo "ERROR: Active chroot session detected!"
        echo "       If this is due to a crash or abort, you can clear it by running:"
        echo "         tools/do_chroot.sh -c"
        echo
        exit 1
    fi

    if [ "$build_target" = "$distro_debian" ]; then
        release_msg="Debian"
    elif [ "$build_target" = "$distro_devuan" ]; then
        release_msg="Devuan"
    else
        release_msg="Alpine: $ALPINE_VERSION"
    fi
    msg_1 "Building iSH-AOK $release_msg filesystem - $AOK_VERSION"
    unset release_msg

    if ! $aok_FS_do_compress; then
        msg_2 "*** Will not create the compressed image! ***"
    fi
    echo
}

cache_fs_image() {
    msg_2 "cache_fs_image()"
    [ -z "$src_image" ] && error_msg "cache_fs_image() no src_image supplied"
    [ -z "$src_tarball" ] && error_msg "cache_fs_image() no src_taball supplied"

    if [ ! -d "$src_img_cache_d" ]; then
        mkdir -p "$src_img_cache_d"
    fi
    cd "$src_img_cache_d" || {
        error_msg "Failed to cd to $src_img_cache_d"
    }
    if [ ! -f "$src_img_cache_d/$src_tarball" ]; then
        cmd="wget $src_image"
        #  Ensure basename for tar ball is used
        case "$build_target" in
        "$distro_alpine" | "$destfs_select") cmd="$cmd -O $alpine_src_tb" ;;
        "$distro_debian") cmd="$cmd -O $debian_src_tb" ;;
        "$distro_devuan") cmd="$cmd -O $devuan_src_tb" ;;
        *)
            error_msg "Invalid build_target: $build_target"
            ;;
        esac
        $cmd || {
            echo "ERROR: Failed to download $src_image"
            exit 1
        }
    fi
    # msg_3 "cache_fs_image() done"
}

copy_AOK_to_dest() {
    #
    #  Copy AOK content to destination
    #
    msg_2 "copy_AOK_to_dest()"

    mkdir -p "$aok_files"
    mkdir -p "$build_root_d"/etc/opt

    rsync -ah \
        --exclude=.git/ \
        --exclude=.gitignore \
        --exclude=.gitmodules \
        --exclude=.vscode/ \
        --exclude=.AOK_VARS \
        "$aok_content" "$build_root_d"/opt

    io_dst_conf="$aok_files"/AOK_VARS
    io_conf_overrides="$aok_content"/.AOK_VARS
    if [ -f "$io_conf_overrides" ]; then
        msg_3 "Appending .AOK_CONF on dest FS"
        (
            echo
            echo
            echo "########################################################################"
            echo "#"
            echo "#                   Config overrides"
            echo "#"
            echo "########################################################################"
            echo
            cat "$io_conf_overrides"
        ) >>"$io_dst_conf"
    fi
    unset io_dst_conf
    unset io_conf_overrides

    chown -R root: "$aok_files"

    msg_3 "copy_AOK_to_dest() done"
}

add_additional_tasks_if_defined() {
    #
    #  If defined, append additional tasks
    #
    msg_2 "add_additional_tasks_if_defined($FIRST_BOOT_ADDITIONAL_TASKS)"
    if [ -n "$FIRST_BOOT_ADDITIONAL_TASKS" ]; then
        msg_3 "Creating additional tasks script"
        mkdir -p "$build_root_d"/opt
        {
            echo "#!/bin/sh"
            echo "$FIRST_BOOT_ADDITIONAL_TASKS"
        } >"$additional_tasks_script"
        chmod 755 "$additional_tasks_script"
        msg_3 "setup FIRST_BOOT_ADDITIONAL_TASKS to be run in $additional_tasks_script"
    fi
    # msg_3 "add_additional_tasks_if_defined() done"
}

setup_Alpine_on_1st_boot() {
    msg_2 "setup_Alpine_on_1st_boot()"

    # buildtype_set "$distro_alpine"
    set_new_etc_profile "$setup_alpine_scr"
    # msg_3 "setup_Alpine_on_1st_boot() done"
}

setup_Debian_on_1st_boot() {
    msg_2 "setup_Debian_on_1st_boot()"

    # buildtype_set "$distro_debian"
    set_new_etc_profile "$setup_debian_scr"
    # msg_3 "setup_Debian_on_1st_boot() done"
}

setup_Devuan_on_1st_boot() {
    msg_2 "setup_Devuan_on_1st_boot()"

    # buildtype_set "$distro_devuan"
    set_new_etc_profile "$setup_devuan_scr"
    # msg_3 "setup_Devuan_on_1st_boot() done"
}

select_distro_on_1st_boot() {
    msg_2 "select_distro_on_1st_boot()"

    # buildtype_set "$destfs_select"

    touch "$destfs_select_hint"

    set_new_etc_profile "$setup_select_distro_prepare"

    #
    #  If this build platform cant chroot, then the preparational steps
    #  will be run on 1st boot, a slight delay, but end result is
    #  the same.
    #
    if [ "$build_env" -gt 0 ]; then
        if ! "$aok_content"/tools/do_chroot.sh /etc/profile; then
            error_msg "Error in chroot, aborting build!"
        fi
    else
        echo
        msg_2 "***  Could not chroot, did not run: $setup_select_distro_prepare  ***"
        msg_2 "This means that this image will have to run the preparatory"
        msg_2 "step, before displaying the Distro selection dialog"
        echo
    fi
    # msg_3 "select_distro_on_1st_boot()  done"
}

prebuild_fs() {
    msg_1 "prebuild_fs()"

    if [ "$build_env" -eq 0 ]; then
        error_msg "Not possible to pre-build on this environment!"
    fi

    #
    # chrooting and doing setup
    #
    cd "$aok_content" || {
        error_msg "Failed to cd into: $aok_content"
    }

    deploy_state_set "$deploy_state_pre_build"

    "$aok_content"/tools/do_chroot.sh /etc/profile || {
        error_msg "There was an error during prebuild"
    }
    msg_1 "Returned from prebuild chroot"

    # msg_3 "prebuild_fs() done"
}

consider_generating_tarball() {
    msg_2 "consider_generating_tarball()"
    #
    #  Consider to generate a tarball
    #
    if $aok_FS_do_compress; then
        cgt_extra_params=""
        if $verbose; then
            cgt_extra_params="-v"
        fi
        if $use_bzip2; then
            cgt_extra_params="$cgt_extra_params -j"
        fi

        # #
        # #  Set name for tarball
        # #
        # if [ "$build_target" = "$distro_debian" ]; then
        #     cgt_label="$debian_tb"
        # elif [ "$build_target" = "$distro_devuan" ]; then
        #     cgt_label="$devuan_tb"
        # elif [ "$build_target" = "$destfs_select" ]; then
        #     cgt_label="$select_distro_tb"
        # else
        #     cgt_label="$alpine_tb"
        # fi

        # if $pre_build_FS; then
        #     #  give a hint this was pre-built
        #     cgt_label="${cgt_label}-pb"
        # fi

        if [ -n "$build_root_d" ] && ls -A "$build_root_d"/iCloud/* >/dev/null 2>&1; then
            msg_2 "Clearing /iCloud before generating image"
            rm "$build_root_d"/iCloud/* -rf
        fi
        #  shellcheck disable=SC2086,SC2248
        if ! "$aok_content"/compress_image $cgt_extra_params; then
            error_msg "detected in compress_image"
        fi
        unset cgt_extra_params
        unset cgt_label
    fi

    if [ "$build_env" -gt 0 ]; then
        if [ "$build_target" = "$distro_debian" ]; then
            set_shell="/bin/sh"
        else
            set_shell="/bin/ash"
        fi
        msg_1 "How to access the just created FS from this env"
        if $pre_build_FS; then
            echo "   chrooting into the FS:"
            echo "     sudo ./tools/do_chroot.sh"
        else
            echo "   You can work on the filesystem without triggering deploy by running:"
            echo "     sudo ./tools/do_chroot.sh $set_shell"
            echo
            echo "   To trigger a first boot deploy, run:"
            echo "     sudo ./tools/do_chroot.sh /etc/profile"
        fi
        echo

        unset set_shell
    else
        echo
        echo "This platform can not chroot into the FS"
    fi
    # msg_3 "consider_generating_tarball() done"
}

display_build_time() {
    msg_2 "display_build_time()"
    dbt_duration="$(($(date +%s) - t_start))"
    if $pre_build_FS; then
        dbt_lbl="Create and setup FS"
    else
        dbt_lbl="Create FS"
    fi
    display_time_elapsed "$dbt_duration" "$dbt_lbl"
    unset dbt_duration
    unset dbt_lbl
    # msg_3 "display_build_time() done"
}

#===============================================================
#
#   Main
#
#===============================================================

#  Allowing this to be run from anywhere using path
AOK_DIR=$(cd -- "$(dirname -- "$0")" && pwd)

# shellcheck source=/opt/AOK/tools/run_as_root.sh
hide_run_as_root=1 . "$AOK_DIR/tools/run_as_root.sh"

# shellcheck source=/opt/AOK/tools/utils.sh
. "$AOK_DIR/tools/utils.sh"

t_start="$(date +%s)"

# shellcheck disable=SC1007
prog_name=$(basename "$0")

deploy_state_set "$deploy_state_na" # Dest FS not yet created

#
#  Point to AOK-Filesystem-Tools dir, in case this was run with a path
#  to keep things relative and simple
#
#  shellcheck disable=SC1007
cd "$aok_content" || {
    error_msg "Failed to cd into: $aok_content"
}

#
#  Default for options
#
build_target="$distro_alpine" # default target
verbose=false                 # true displays tar/untar progress
use_bzip2=false               # Use tgz when compressing image
pre_build_FS=false            # true meand generat4 pre-built FS
aok_FS_do_compress=true       # compress FS at end of build_fs

aok_files="${build_root_d}${aok_content}"

parse_arguments "$@"

check_dependencies

display_build_target

test -f "$additional_tasks_script" && notification_additional_tasks

msg_2 "Preparing build environment"

msg_3 "Clearing build root $build_root_d"
rm -rf "$build_root_d"

if [ "$build_target" = "$distro_debian" ]; then
    src_image="$DEBIAN_SRC_IMAGE"
    src_tarball="$debian_src_tb"
elif [ "$build_target" = "$distro_devuan" ]; then
    src_image="$DEVUAN_SRC_IMAGE"
    src_tarball="$devuan_src_tb"
else
    src_image="$alpine_src_image"
    src_tarball="$alpine_src_tb"
fi

cache_fs_image
create_fs "${src_img_cache_d}/$src_tarball" "$build_root_d" "$verbose"

copy_AOK_to_dest
msg_3 "Deployed $aok_content on new filesystem"

#
#  Alpine initial motd suggests running setup-alpine. Not available on iSH
#  Since setup_alpine.sh will create an AOK relevant motd,
#  deleting the default one both on Alpine & Debian makes sence.
#
msg_2 "Remove initial /etc/motd from new filesystem"
rm "$build_root_d"/etc/motd

# Should always happen
msg_2 "Create directory /iCloud inside new filesystem"
mkdir "$build_root_d"/iCloud

if [ -n "$POPULATE_FS" ]; then
    msg_1 "POPULATE_FS cmd: $POPULATE_FS"
    $POPULATE_FS
fi

if [ "$build_target" = "$distro_debian" ]; then
    setup_Debian_on_1st_boot
elif [ "$build_target" = "$distro_devuan" ]; then
    setup_Devuan_on_1st_boot
elif [ "$build_target" = "$destfs_select" ]; then
    select_distro_on_1st_boot
else
    setup_Alpine_on_1st_boot
fi

add_additional_tasks_if_defined

if $pre_build_FS; then
    prebuild_fs
fi

msg_1 "The filesystem is ready!"

consider_generating_tarball

display_build_time
